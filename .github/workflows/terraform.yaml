name: Terraform ConfluxDB Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types:
      - worker-image-published
      - dagster-agent-image-published

permissions:
  id-token: write
  contents: read
  pull-requests: read

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production
    env:
      DAGSTER_AGENT_TOKEN: ${{ secrets.DAGSTER_AGENT_TOKEN }}
      DAGSTER_CLOUD_URL_PROD: ${{ vars.DAGSTER_CLOUD_URL_PROD }}
      DAGSTER_CLOUD_URL_DEV: ${{ vars.DAGSTER_CLOUD_URL_DEV }}
      DAGSTER_AGENT_IMAGE_TAG: ${{ vars.DAGSTER_AGENT_IMAGE_TAG }}
      CONFLUXDB_CODE_IMAGE_TAG: ${{ vars.CONFLUXDB_CODE_IMAGE_TAG }}
      AGENT_MANAGED_SECRETS_JSON: ${{ vars.AGENT_MANAGED_SECRETS_JSON }}
      WORKER_MANAGED_SECRETS_JSON: ${{ vars.WORKER_MANAGED_SECRETS_JSON }}
      WORKER_SECRETS_JSON: ${{ vars.WORKER_SECRETS_JSON }}
      WORKER_TASK_ROLE_POLICY_ARNS_JSON: ${{ vars.WORKER_TASK_ROLE_POLICY_ARNS_JSON }}

      DB_API_AUTH_KEY_SECRET: ${{ secrets.DB_API_AUTH_KEY_SECRET }}
      DB_API_ALLOWED_SOURCE_IPS: ${{ vars.DB_API_ALLOWED_SOURCE_IPS }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Select environment
        env:
          EVENT_NAME: ${{ github.event_name }}
          CLIENT_TF_ENV: ${{ github.event.client_payload.tf_env }}
        run: |
          if [[ "$EVENT_NAME" == "repository_dispatch" ]]; then
            if [[ -n "$CLIENT_TF_ENV" ]]; then
              echo "TF_ENV=$CLIENT_TF_ENV" >> $GITHUB_ENV
            else
              echo "TF_ENV=prod" >> $GITHUB_ENV
            fi
          elif [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "TF_ENV=prod" >> $GITHUB_ENV
          else
            echo "TF_ENV=dev" >> $GITHUB_ENV
          fi

      - name: Capture dispatched worker image tag
        if: github.event_name == 'repository_dispatch' && github.event.action == 'worker-image-published'
        env:
          IMAGE_TAG: ${{ github.event.client_payload.image_tag }}
        run: |
          if [[ -z "$IMAGE_TAG" ]]; then
            echo "client_payload.image_tag is required for repository_dispatch events" >&2
            exit 1
          fi
          echo "CONFLUXDB_CODE_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Capture dispatched agent image tag
        if: github.event_name == 'repository_dispatch' && github.event.action == 'dagster-agent-image-published'
        env:
          IMAGE_TAG: ${{ github.event.client_payload.image_tag }}
        run: |
          if [[ -z "$IMAGE_TAG" ]]; then
            echo "client_payload.image_tag is required for repository_dispatch events" >&2
            exit 1
          fi
          echo "DAGSTER_AGENT_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build runtime tfvars (no repo tfvars)
        run: |
          if [[ "${TF_ENV}" == "prod" ]]; then
            export DAGSTER_CLOUD_URL="$DAGSTER_CLOUD_URL_PROD"
          else
            export DAGSTER_CLOUD_URL="$DAGSTER_CLOUD_URL_DEV"
          fi
          python - <<'PY'
          if True:
              import json
              import os
              import pathlib
              import sys

              def parse_json_env(key, default):
                  raw = os.environ.get(key, '').strip()
                  if not raw:
                      raw = default
                  if raw and raw[0] == raw[-1] and raw[0] in ("'", '"'):
                      raw = raw[1:-1]
                  try:
                      return json.loads(raw)
                  except json.JSONDecodeError as exc:
                      sys.stderr.write(f"{key} must contain valid JSON: {exc}\nGot: {raw!r}\n")
                      sys.exit(1)

              config = {
                  "aws_region": "eu-west-1",
                  "environment": os.environ.get("TF_ENV", ""),
                  "github_agent_repo": "confluxdb-dagster-agent",
                  "github_worker_repo": "confluxdb",
                  "github_ci_branch": "main",
                  "dagster_agent_env": {
                      "DAGSTER_CLOUD_URL": os.environ.get("DAGSTER_CLOUD_URL", ""),
                      "DAGSTER_ENV": os.environ.get("TF_ENV", ""),
                  },
                  "dagster_agent_image_tag": os.environ.get("DAGSTER_AGENT_IMAGE_TAG", ""),
                  "confluxdb_code_image_tag": os.environ.get("CONFLUXDB_CODE_IMAGE_TAG", ""),
                  "create_dagster_agent_token_secret": True,
                  "agent_managed_secrets": parse_json_env("AGENT_MANAGED_SECRETS_JSON", "{}"),
                  "worker_managed_secrets": parse_json_env("WORKER_MANAGED_SECRETS_JSON", "{}"),
                  "worker_secrets": parse_json_env("WORKER_SECRETS_JSON", "[]"),
                  "worker_task_role_policy_arns": parse_json_env("WORKER_TASK_ROLE_POLICY_ARNS_JSON", "[]"),
              }

              pathlib.Path("runtime.auto.tfvars.json").write_text(json.dumps(config, indent=2) + "\n")
          PY

      - name: Install Lambda layer dependencies
        run: |
          pip install -r layers/db_api/requirements.txt -t layers/db_api/python

      - name: Export API settings
        run: |
          if [[ -n "$DB_API_AUTH_KEY_SECRET" ]]; then
            echo "TF_VAR_db_api_auth_key_value=$DB_API_AUTH_KEY_SECRET" >> $GITHUB_ENV
          fi
          if [[ -n "$DB_API_ALLOWED_SOURCE_IPS" ]]; then
            echo "TF_VAR_db_api_allowed_source_ips=$DB_API_ALLOWED_SOURCE_IPS" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: terraform init -backend-config="environments/${TF_ENV}.backend.hcl" -reconfigure

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan

      - name: Append plan to job summary
        if: always()
        run: terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'repository_dispatch' && (github.event.action == 'worker-image-published' || github.event.action == 'dagster-agent-image-published')) }}
        run: terraform apply -auto-approve tfplan

      - name: Set Dagster agent token in Secrets Manager (post-apply)
        if: ${{ ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'repository_dispatch' && (github.event.action == 'worker-image-published' || github.event.action == 'dagster-agent-image-published'))) && env.DAGSTER_AGENT_TOKEN != '' }}
        run: |
          aws secretsmanager put-secret-value \
            --secret-id "confluxdb/${TF_ENV}/dagster_agent_token" \
            --secret-string "$DAGSTER_AGENT_TOKEN" \
            --region eu-west-1
