name: Terraform ConfluxDB Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read
  pull-requests: read

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production
    env:
      DAGSTER_AGENT_TOKEN: ${{ secrets.DAGSTER_AGENT_TOKEN }}
      DAGSTER_CLOUD_URL_PROD: ${{ vars.DAGSTER_CLOUD_URL_PROD }}
      DAGSTER_CLOUD_URL_DEV: ${{ vars.DAGSTER_CLOUD_URL_DEV }}
      DAGSTER_AGENT_IMAGE_TAG: ${{ vars.DAGSTER_AGENT_IMAGE_TAG }}
      CONFLUXDB_CODE_IMAGE_TAG: ${{ vars.CONFLUXDB_CODE_IMAGE_TAG }}
      AGENT_MANAGED_SECRETS_JSON: ${{ vars.AGENT_MANAGED_SECRETS_JSON }}
      WORKER_MANAGED_SECRETS_JSON: ${{ vars.WORKER_MANAGED_SECRETS_JSON }}
      WORKER_SECRETS_JSON: ${{ vars.WORKER_SECRETS_JSON }}
      WORKER_TASK_ROLE_POLICY_ARNS_JSON: ${{ vars.WORKER_TASK_ROLE_POLICY_ARNS_JSON }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Select environment
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "TF_ENV=prod" >> $GITHUB_ENV
          else
            echo "TF_ENV=dev" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: terraform init -backend-config="environments/${TF_ENV}.backend.hcl" -reconfigure

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Build runtime tfvars (no repo tfvars)
        run: |
          if [[ "${TF_ENV}" == "prod" ]]; then
            DAGSTER_CLOUD_URL="$DAGSTER_CLOUD_URL_PROD"
          else
            DAGSTER_CLOUD_URL="$DAGSTER_CLOUD_URL_DEV"
          fi
          : "${AGENT_MANAGED_SECRETS_JSON:='{}'}"
          : "${WORKER_MANAGED_SECRETS_JSON:='{}'}"
          : "${WORKER_SECRETS_JSON:='[]'}"
          : "${WORKER_TASK_ROLE_POLICY_ARNS_JSON:='[]'}"
          cat > runtime.auto.tfvars.json <<EOF
          {
            "aws_region": "eu-west-1",
            "environment": "${TF_ENV}",
            "dagster_agent_env": {
              "DAGSTER_CLOUD_URL": "${DAGSTER_CLOUD_URL}",
              "DAGSTER_ENV": "${TF_ENV}"
            },
            "dagster_agent_image_tag": "${DAGSTER_AGENT_IMAGE_TAG}",
            "confluxdb_code_image_tag": "${CONFLUXDB_CODE_IMAGE_TAG}",
            "create_dagster_agent_token_secret": true,
            "agent_managed_secrets": ${AGENT_MANAGED_SECRETS_JSON},
            "worker_managed_secrets": ${WORKER_MANAGED_SECRETS_JSON},
            "worker_secrets": ${WORKER_SECRETS_JSON},
            "worker_task_role_policy_arns": ${WORKER_TASK_ROLE_POLICY_ARNS_JSON}
          }
          EOF

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan

      - name: Append plan to job summary
        if: always()
        run: terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Set Dagster agent token in Secrets Manager (post-apply)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.DAGSTER_AGENT_TOKEN != ''
        run: |
          aws secretsmanager put-secret-value \
            --secret-id "confluxdb/${TF_ENV}/dagster_agent_token" \
            --secret-string "$DAGSTER_AGENT_TOKEN" \
            --region eu-west-1
